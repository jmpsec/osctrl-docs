[
{
	"uri": "https://osctrl.net/usage/osctrld/",
	"title": "osctrld",
	"tags": [],
	"description": "",
	"content": "osctrld is the daemon service for enrolled osquery nodes in osctrl.\nExecute ./osctrld -h to show the main help of the program:\n$ ./bin/osctrld -h NAME: osctrld - Daemon for osctrl USAGE: osctrld [global options] command [command options] [arguments...] VERSION: 1.0.0 DESCRIPTION: Daemon for osctrl, to manage secret, flags and osquery deployment COMMANDS: enroll Enroll a new node in osctrl, using new secret and flag files remove Remove enrolled node from osctrl, clearing secret and flag files verify Verify flags, cert and secret for an enrolled node in osctrl flags Retrieve flags for osquery from osctrl and write them locally cert Retrieve server certificate for osquery from osctrl and write it locally help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --certificate FILE, -C FILE Use FILE as certificate for osquery, if needed. Default depends on OS [$OSQUERY_CERTIFICATE] --configuration value, -c value, --conf value, --config value Configuration file for osctrld to load all necessary values [$OSCTRL_CONFIG] --environment value, -e value, --env value Environment in osctrl to enrolled nodes to [$OSCTRL_ENV] --flagfile FILE, -F FILE Use FILE as flagfile for osquery. Default depends on OS [$OSQUERY_FLAGFILE] --force, -f Overwrite existing files for flags, certificate and secret (default: false) [$OSCTRL_FORCE] --help, -h show help (default: false) --insecure, -i Ignore TLS warnings, often used with self-signed certificates (default: false) [$OSCTRL_INSECURE] --osctrl-url value, -U value Base URL for the osctrl server [$OSCTRL_URL] --secret value, -s value Enroll secret to authenticate against osctrl server [$OSCTRL_SECRET] --secret-file FILE, -S FILE Use FILE as secret file for osquery. Default depends on OS [$OSQUERY_SECRET] --verbose, -V Enable verbose informational messages (default: false) [$OSCTRL_VERBOSE] --version, -v print the version (default: false) "
},
{
	"uri": "https://osctrl.net/usage/osctrl-cli/user/",
	"title": "user",
	"tags": [],
	"description": "",
	"content": "User $ ./osctrl-cli user -h NAME: osctrl-cli user - Commands for users USAGE: osctrl-cli user command [command options] [arguments...] COMMANDS: add, a Add a new user edit, e Edit an existing user delete, d Delete an existing user list, l List all existing users OPTIONS: --help, -h show help Add user $ ./osctrl-cli user add -h NAME: osctrl-cli user add - Add a new user USAGE: osctrl-cli user add [command options] [arguments...] OPTIONS: --username value, -u value Username for the new user --password value, -p value Password for the new user --admin, -a Make this user an admin --environment value, -E value Default environment for the new user --email value, -e value Email for the new user --fullname value, -n value Full name for the new user Edit user $ ./osctrl-cli user edit -h NAME: osctrl-cli user edit - Edit an existing user USAGE: osctrl-cli user edit [command options] [arguments...] OPTIONS: --username value, -u value User to be edited --password value, -p value New password to be used --email value, -e value Email to be used --fullname value, -n value Full name to be used --admin, -a Make this user an admin --non-admin, -d Make this user an non-admin --environment value, -E value Default environment for this user Delete user $ ./osctrl-cli user delete -h NAME: osctrl-cli user delete - Delete an existing user USAGE: osctrl-cli user delete [command options] [arguments...] OPTIONS: --username value, -u value User to be deleted List users $ ./osctrl-cli user list -h NAME: osctrl-cli user list - List all existing users USAGE: osctrl-cli user list [arguments...] "
},
{
	"uri": "https://osctrl.net/usage/osctrl-tls/",
	"title": "osctrl-tls",
	"tags": [],
	"description": "",
	"content": "osctrl-tls is the TLS service for osctrl.\nExecute ./osctrl-tls -h to show the main help of the program:\n$ ./osctrl-tls -h NAME: osctrl-tls - TLS service for osctrl, a fast and efficient osquery management USAGE: osctrl-tls [global options] command [command options] [arguments...] VERSION: 0.3.0 DESCRIPTION: TLS service for osctrl, a fast and efficient osquery management COMMANDS: help GLOBAL OPTIONS: --config, -c Provide service configuration via JSON file (default: false) [$SERVICE_CONFIG] --config-file FILE, -C FILE Load service configuration from FILE (default: \u0026#34;config/tls.json\u0026#34;) [$SERVICE_CONFIG_FILE] --listener value, -l value Listener for the service (default: \u0026#34;0.0.0.0\u0026#34;) [$SERVICE_LISTENER] --port value, -p value TCP port for the service (default: \u0026#34;9000\u0026#34;) [$SERVICE_PORT] --auth value, -A value Authentication mechanism for the service (default: \u0026#34;none\u0026#34;) [$SERVICE_AUTH] --host value, -H value Exposed hostname the service uses (default: \u0026#34;0.0.0.0\u0026#34;) [$SERVICE_HOST] --logger value, -L value Logger mechanism to handle status/result logs from nodes (default: \u0026#34;db\u0026#34;) [$SERVICE_LOGGER] --redis, -r Provide redis configuration via JSON file (default: false) [$REDIS_CONFIG] --redis-file FILE, -R FILE Load redis configuration from FILE (default: \u0026#34;config/redis.json\u0026#34;) [$REDIS_CONFIG_FILE] --redis-host value Redis host to be connected to (default: \u0026#34;127.0.0.1\u0026#34;) [$REDIS_HOST] --redis-port value Redis port to be connected to (default: \u0026#34;6379\u0026#34;) [$REDIS_PORT] --redis-pass value Password to be used for redis [$REDIS_PASS] --redis-db value Redis database to be selected after connecting (default: 0) [$REDIS_DB] --redis-status-exp value Redis expiration in hours for status logs (default: 24) [$REDIS_STATUS_EXP] --redis-result-exp value Redis expiration in hours for result logs (default: 24) [$REDIS_RESULT_EXP] --redis-query-exp value Redis expiration in hours for query logs (default: 24) [$REDIS_QUERY_EXP] --db, -d Provide DB configuration via JSON file (default: false) [$DB_CONFIG] --db-file FILE, -D FILE Load DB configuration from FILE (default: \u0026#34;config/db.json\u0026#34;) [$DB_CONFIG_FILE] --db-host value Backend host to be connected to (default: \u0026#34;127.0.0.1\u0026#34;) [$DB_HOST] --db-port value Backend port to be connected to (default: \u0026#34;5432\u0026#34;) [$DB_PORT] --db-name value Database name to be used in the backend (default: \u0026#34;osctrl\u0026#34;) [$DB_NAME] --db-user value Username to be used for the backend (default: \u0026#34;postgres\u0026#34;) [$DB_USER] --db-pass value Password to be used for the backend (default: \u0026#34;postgres\u0026#34;) [$DB_PASS] --db-max-idle-conns value Maximum number of connections in the idle connection pool (default: 20) [$DB_MAX_IDLE_CONNS] --db-max-open-conns value Maximum number of open connections to the database (default: 100) [$DB_MAX_OPEN_CONNS] --db-conn-max-lifetime value Maximum amount of time a connection may be reused (default: 30) [$DB_CONN_MAX_LIFETIME] --tls, -t Enable TLS termination. It requires certificate and key (default: false) [$TLS_SERVER] --cert FILE, -T FILE TLS termination certificate from FILE (default: \u0026#34;config/tls.crt\u0026#34;) [$TLS_CERTIFICATE] --key FILE, -K FILE TLS termination private key from FILE (default: \u0026#34;config/tls.key\u0026#34;) [$TLS_KEY] --logger-file value, -F value Logger configuration to handle status/results logs from nodes (default: \u0026#34;config/logger.json\u0026#34;) [$LOGGER_FILE] --always-log, -a, --always Always log status and on-demand query logs from nodes in database (default: false) [$ALWAYS_LOG] --carver-type value Carver to be used to receive files extracted from nodes (default: \u0026#34;db\u0026#34;) [$CARVER_TYPE] --carver-file value Carver configuration file to receive files extracted from nodes (default: \u0026#34;config/carver.json\u0026#34;) [$CARVER_FILE] --log-s3-bucket value S3 bucket to be used as configuration for logging [$LOG_S3_BUCKET] --log-s3-region value S3 region to be used as configuration for logging [$LOG_S3_REGION] --log-s3-key-id value S3 access key id to be used as configuration for logging [$LOG_S3_KEY_ID] --log-s3-secret value S3 access key secret to be used as configuration for logging [$LOG_S3_SECRET] --carver-s3-bucket value S3 bucket to be used as configuration for carves [$CARVER_S3_BUCKET] --carver-s3-region value S3 region to be used as configuration for carves [$CARVER_S3_REGION] --carve-s3-key-id value S3 access key id to be used as configuration for carves [$CARVER_S3_KEY_ID] --carve-s3-secret value S3 access key secret to be used as configuration for carves [$CARVER_S3_SECRET] --version, -v print the version (default: false) "
},
{
	"uri": "https://osctrl.net/deployment/vagrant/",
	"title": "Using Vagrant",
	"tags": [],
	"description": "",
	"content": "Vagrant can be used for osctrl local development. Execute vagrant up to create a local virtual machine running Ubuntu 18.04. Once it has finished deploying, osctrl will be ready to be used and you can access it following the instructions in the terminal.\nTake a look at the Vagrantfile to understand how the local vagrant machine is created and to modify it to better fit your needs. It will install and configure all components of osctrl using the provision.sh script. The full command used looks as follows:\n./deploy/provision.sh --nginx --postgres -E --metrics --tls-hostname \u0026#34;10.10.10.6\u0026#34; --admin-hostname \u0026#34;10.10.10.6\u0026#34; --password \u0026#34;admin\u0026#34; According to the usage of the deployment script, the command above will:\n--nginx: Deploy the nginx that is going to be used as TLS termination, --postgres: Deploy the backend component (PostgreSQL), -E: Enroll itself in osctrl, --metrics: Deploy the metrics component (Grafana), --tls-hostname \u0026quot;10.10.10.6\u0026quot;: Use 10.10.10.6 as hostname for osctrl-tls, --admin-hostname \u0026quot;10.10.10.6\u0026quot;: Use 10.10.10.6 as hostname for osctrl-admin, --password \u0026quot;admin\u0026quot;: Use admin as the administrative user (admin) password. Some options will have default values. For example -m will be dev as mode which means that provision will run in development mode and certificate will be self-signed, or -p with all parts provisioned, admin and tls.\nOnce it is done, osctrl will be ready to be used using a private IP, and the admin service will be accesible at https://10.10.10.6:8443/ with the credentials admin/admin.\nHere is the whole output of a successfully executed vagrant up command:\n"
},
{
	"uri": "https://osctrl.net/components/osctrl-tls/",
	"title": "osctrl-tls",
	"tags": [],
	"description": "",
	"content": " The osctrl-tls component is the actual TLS endpoint that implements the remote API of osquery.\nInside of the osctrl-tls, you can run a number of TLS endpoints, to group the nodes that will enroll in each of them. Within osctrl this concept is called an environment.\nEach environment implements handlers to manage the following actions:\nEnroll nodes, Serve osquery configuration to enrolled nodes, Log osquery status messages and osquery results from enrolled nodes, Run on-demand queries in enrolled nodes and collect results, Perform file carving operations in enrolled nodes. Inside osctrl there can be many environments, like a typical environment where you have corporate and production systems. Then you would have one environment for corp, and another one for prod. The reasoning is, if you may need to distribute different configurations to the enrolled nodes, then you should use different environments.\nEnrolling osquery nodes As mentioned before, osquery nodes must be enrolled inside of an environment. In order to achieve that, osquery requires an enrolling secret that will be stored in disk. Also, and given that osquery communicates with osctrl using TLS, a certificate may also be needed.\nFor example, here are the flags to enroll osquery nodes in the dev environment, used as example when deploying osctrl locally. The important part are the path for the different requests to arrive and the intervals in secods:\n--host_identifier=uuid --force=true --utc=true --enroll_secret_path=__SECRET_FILE__ --enroll_tls_endpoint=/dev/enroll --config_plugin=tls --config_tls_endpoint=/dev/config --config_tls_refresh=300 --config_tls_max_attempts=5 --logger_plugin=tls --logger_tls_compress=true --logger_tls_endpoint=/dev/log --logger_tls_period=600 --disable_carver=false --carver_disable_function=false --carver_start_endpoint=/dev/init --carver_continue_endpoint=/dev/block --disable_distributed=false --distributed_interval=60 --distributed_plugin=tls --distributed_tls_max_attempts=3 --distributed_tls_read_endpoint=/dev/read --distributed_tls_write_endpoint=/dev/write --tls_dump=true --tls_hostname=osctrl-nginx --tls_server_certs=__CERT_FILE__ The values of __CERT_FILE__ and __SECRET_FILE__ will be the local full path for certificate and secret respectively.\nEscaling osctrl-tls The idea behind making osctrl-tls its own component is all about scalability. In a scenario with many nodes enrolled, the number of requests is going to increase quickly, especially if we lower the intervals.\nRunning multiple instances of osctrl-tls will help to scale the service and be reliable for a larger number of nodes.\nFor example, using the intervals of the flags above, where logs, configuration and queries run every 600, 300 and 60 seconds. Presuming that you have 1000 machines and you want to enroll them all in osctrl\n"
},
{
	"uri": "https://osctrl.net/components/",
	"title": "Components",
	"tags": [],
	"description": "",
	"content": "Components Diagram of all the osctrl components in action\n"
},
{
	"uri": "https://osctrl.net/usage/osctrl-api/",
	"title": "osctrl-api",
	"tags": [],
	"description": "",
	"content": "osctrl-api is the API service for osctrl.\nExecute ./osctrl-api -h to show the main help of the program:\n$ ./osctrl-api -h NAME: osctrl-api - API service for osctrl, a fast and efficient osquery management USAGE: osctrl-api [global options] command [command options] [arguments...] VERSION: 0.3.0 DESCRIPTION: API service for osctrl, a fast and efficient osquery management COMMANDS: help GLOBAL OPTIONS: --config, -c Provide service configuration via JSON file (default: false) [$SERVICE_CONFIG] --config-file FILE, -C FILE Load service configuration from FILE (default: \u0026#34;config/api.json\u0026#34;) [$SERVICE_CONFIG_FILE] --listener value, -l value Listener for the service (default: \u0026#34;0.0.0.0\u0026#34;) [$SERVICE_LISTENER] --port value, -p value TCP port for the service (default: \u0026#34;9002\u0026#34;) [$SERVICE_PORT] --auth value, -A value Authentication mechanism for the service (default: \u0026#34;none\u0026#34;) [$SERVICE_AUTH] --host value, -H value Exposed hostname the service uses (default: \u0026#34;0.0.0.0\u0026#34;) [$SERVICE_HOST] --logging value, -L value Logging mechanism to handle logs from nodes (default: \u0026#34;none\u0026#34;) [$SERVICE_LOGGER] --redis, -r Provide redis configuration via JSON file (default: false) [$REDIS_CONFIG] --redis-file FILE, -R FILE Load redis configuration from FILE (default: \u0026#34;config/redis.json\u0026#34;) [$REDIS_CONFIG_FILE] --redis-host value Redis host to be connected to (default: \u0026#34;127.0.0.1\u0026#34;) [$REDIS_HOST] --redis-port value Redis port to be connected to (default: \u0026#34;6379\u0026#34;) [$REDIS_PORT] --redis-pass value Password to be used for redis [$REDIS_PASS] --redis-db value Redis database to be selected after connecting (default: 0) [$REDIS_DB] --db, -d Provide DB configuration via JSON file (default: false) [$DB_CONFIG] --db-file FILE, -D FILE Load DB configuration from FILE (default: \u0026#34;config/db.json\u0026#34;) [$DB_CONFIG_FILE] --db-host value Backend host to be connected to (default: \u0026#34;127.0.0.1\u0026#34;) [$DB_HOST] --db-port value Backend port to be connected to (default: \u0026#34;5432\u0026#34;) [$DB_PORT] --db-name value Database name to be used in the backend (default: \u0026#34;osctrl\u0026#34;) [$DB_NAME] --db-user value Username to be used for the backend (default: \u0026#34;postgres\u0026#34;) [$DB_USER] --db-pass value Password to be used for the backend (default: \u0026#34;postgres\u0026#34;) [$DB_PASS] --db-max-idle-conns value Maximum number of connections in the idle connection pool (default: 20) [$DB_MAX_IDLE_CONNS] --db-max-open-conns value Maximum number of open connections to the database (default: 100) [$DB_MAX_OPEN_CONNS] --db-conn-max-lifetime value Maximum amount of time a connection may be reused (default: 30) [$DB_CONN_MAX_LIFETIME] --tls, -t Enable TLS termination. It requires certificate and key (default: false) [$TLS_SERVER] --cert FILE, -T FILE TLS termination certificate from FILE (default: \u0026#34;config/tls.crt\u0026#34;) [$TLS_CERTIFICATE] --key FILE, -K FILE TLS termination private key from FILE (default: \u0026#34;config/tls.key\u0026#34;) [$TLS_KEY] --jwt, -j Provide JWT configuration via JSON file (default: false) [$JWT_CONFIG] --jwt-file FILE Load JWT configuration from FILE (default: \u0026#34;config/jwt.json\u0026#34;) [$JWT_CONFIG_FILE] --jwt-secret value Password to be used for the backend [$JWT_SECRET] --jwt-expire value Maximum amount of hours for the tokens to expire (default: 3) [$JWT_EXPIRE] --version, -v print the version (default: false) "
},
{
	"uri": "https://osctrl.net/components/osctrl-api/",
	"title": "osctrl-api",
	"tags": [],
	"description": "",
	"content": " The osctrl-api component of osctrl provides an API interface to interact with its enrolled nodes and with osctrl itself.\nThe API is documented with Swagger:\nhttps://app.swaggerhub.com/apis-docs/jmpsec/osctrl-api/\n"
},
{
	"uri": "https://osctrl.net/usage/osctrl-cli/environment/",
	"title": "environment",
	"tags": [],
	"description": "",
	"content": "Environment $ ./osctrl-cli environment -h NAME: osctrl-cli environment - Commands for TLS environment USAGE: osctrl-cli environment command [command options] [arguments...] COMMANDS: add, a Add a new TLS environment update, u Update an existing TLS environment add-scheduled-query Add a new query to the osquery schedule for an environment remove-scheduled-query Remove query from the osquery schedule for an environment add-osquery-option Add or change an osquery option to the configuration remove-osquery-option Remove an option for the osquery configuration add-new-pack Add a new query pack to the osquery configuration add-local-pack Add a new local query pack to the osquery configuration remove-pack Remove query pack from the osquery configuration add-query-to-pack Add a new query to the given query pack remove-query-from-pack Remove query from the given query pack delete, d Delete an existing TLS environment show, s Show a TLS environment show-flags, w Show the flags for a TLS environment list, l List all existing TLS environments quick-add, q Generates one-liner for quick adding nodes to environment flags, f Generates the flags to run nodes in an environment secret, x Output the secret to enroll nodes in an environment OPTIONS: --help, -h show help Add environment $ ./osctrl-cli environment add -h NAME: osctrl-cli environment add - Add a new TLS environment USAGE: osctrl-cli environment add [command options] [arguments...] OPTIONS: --name value, -n value Environment to be added --hostname value, --host value Environment host to be added --debug, -d Environment debug capability --certificate value, --crt value Certificate file to be read Update environment $ ./osctrl-cli environment update -h NAME: osctrl-cli environment update - Update an existing TLS environment USAGE: osctrl-cli environment update [command options] [arguments...] OPTIONS: --name value, -n value Environment to be updated --debug, -d Environment debug capability --hostname value, --host value Environment host to be updated --logging value, -l value Logging interval in seconds (default: 0) --config value, -c value Config interval in seconds (default: 0) --query value, -q value Query interval in seconds (default: 0) Add scheduled query to environment $ ./osctrl-cli environment add-scheduled-query -h NAME: osctrl-cli environment add-scheduled-query - Add a new query to the osquery schedule for an environment USAGE: osctrl-cli environment add-scheduled-query [command options] [arguments...] OPTIONS: --name value, -n value Environment to be updated --query value, -q value Query to be added to the schedule --query-name value, -Q value Query name to be idenfified in the schedule --interval value, -i value Query interval in seconds (default: 0) --platform value, -p value Restrict this query to a given platform --version value, -v value Only run on osquery versions greater than or equal-to this version Remove scheduled query from environment $ ./osctrl-cli environment remove-scheduled-query -h NAME: osctrl-cli environment remove-scheduled-query - Remove query from the osquery schedule for an environment USAGE: osctrl-cli environment remove-scheduled-query [command options] [arguments...] OPTIONS: --name value, -n value Environment to be updated --query-name value, -q value Query to be removed from the schedule Add osquery option to environment $ ./osctrl-cli environment add-osquery-option -h NAME: osctrl-cli environment add-osquery-option - Add or change an osquery option to the configuration USAGE: osctrl-cli environment add-osquery-option [command options] [arguments...] OPTIONS: --name value, -n value Environment to be updated --option value, -o value Option name to be added --type value, -t value Option type for the value (string, int, bool) --string-value value, -s value String value for the option --int-value value, -i value Integer value for the option (default: 0) --bool-value, -b Boolean value for the option Remove osquery option from environment $ ./osctrl-cli environment remove-osquery-option -h NAME: osctrl-cli environment remove-osquery-option - Remove an option for the osquery configuration USAGE: osctrl-cli environment remove-osquery-option [command options] [arguments...] OPTIONS: --name value, -n value Environment to be updated --option value, -o value Option name to be added Add query pack to environment $ ./osctrl-cli environment add-new-pack -h NAME: osctrl-cli environment add-new-pack - Add a new query pack to the osquery configuration USAGE: osctrl-cli environment add-new-pack [command options] [arguments...] OPTIONS: --name value, -n value Environment to be updated --pack value, -p value Pack name to be added --platform value, -P value Restrict this pack to a given platform --version value, -v value Only run on osquery versions greater than or equal-to this version --shard value, -s value Restrict this query to a percentage (1-100) of target hosts (default: 0) Add local query pack to environment $ ./osctrl-cli environment add-local-pack -h NAME: osctrl-cli environment add-local-pack - Add a new local query pack to the osquery configuration USAGE: osctrl-cli environment add-local-pack [command options] [arguments...] OPTIONS: --name value, -n value Environment to be updated --pack value, -p value Pack name to be added --pack-path value, -P value Local full path to load the query pack within osquery Remove query pack from environment $ ./osctrl-cli environment remove-pack -h NAME: osctrl-cli environment remove-pack - Remove query pack from the osquery configuration USAGE: osctrl-cli environment remove-pack [command options] [arguments...] OPTIONS: --name value, -n value Environment to be updated --pack value, -p value Pack name to be removed Add query to pack in environment $ ./osctrl-cli environment add-query-to-pack -h NAME: osctrl-cli environment add-query-to-pack - Add a new query to the given query pack USAGE: osctrl-cli environment add-query-to-pack [command options] [arguments...] OPTIONS: --name value, -n value Environment to be updated --pack value, -p value Environment to be updated --query value, -q value Query to be added to the pack --query-name value, -Q value Query name to be added to the pack --interval value, -i value Query interval in seconds (default: 0) --platform value, -P value Restrict this query to a given platform --version value, -v value Only run on osquery versions greater than or equal-to this version Remove query from pack in environment $ ./osctrl-cli environment remove-query-from-pack -h NAME: osctrl-cli environment remove-query-from-pack - Remove query from the given query pack USAGE: osctrl-cli environment remove-query-from-pack [command options] [arguments...] OPTIONS: --name value, -n value Environment to be updated --pack value, -p value Pack name to be updated --query-name value, -q value Query name to be removed Delete environment $ ./osctrl-cli environment delete -h NAME: osctrl-cli environment delete - Delete an existing TLS environment USAGE: osctrl-cli environment delete [command options] [arguments...] OPTIONS: --name value, -n value Environment to be deleted Show environment $ ./osctrl-cli environment show -h NAME: osctrl-cli environment show - Show a TLS environment USAGE: osctrl-cli environment show [command options] [arguments...] OPTIONS: --name value, -n value Environment to be displayed Show environment flags $ ./osctrl-cli environment show-flags -h NAME: osctrl-cli environment show-flags - Show the flags for a TLS environment USAGE: osctrl-cli environment show-flags [command options] [arguments...] OPTIONS: --name value, -n value Environment to be displayed List environments $ ./osctrl-cli environment list -h NAME: osctrl-cli environment list - List all existing TLS environments USAGE: osctrl-cli environment list [arguments...] Quick-add to environment $ ./osctrl-cli environment quick-add -h NAME: osctrl-cli environment quick-add - Generates one-liner for quick adding nodes to environment USAGE: osctrl-cli environment quick-add [command options] [arguments...] OPTIONS: --name value, -n value Environment to be used --target value, -t value Type of one-liner (default: \u0026#34;sh\u0026#34;) Flags $ ./osctrl-cli environment flags -h NAME: osctrl-cli environment flags - Generates the flags to run nodes in an environment USAGE: osctrl-cli environment flags [command options] [arguments...] OPTIONS: --name value, -n value Environment to be used --certificate value, --crt value Certificate path to be used --secret value, -s value Secret file path to be used Secret $ ./osctrl-cli environment secret -h NAME: osctrl-cli environment secret - Output the secret to enroll nodes in an environment USAGE: osctrl-cli environment secret [command options] [arguments...] OPTIONS: --name value, -n value Environment to be used "
},
{
	"uri": "https://osctrl.net/usage/osctrl-admin/",
	"title": "osctrl-admin",
	"tags": [],
	"description": "",
	"content": "osctrl-admin is the Admin service for osctrl.\nExecute ./osctrl-admin -h to show the main help of the program:\n$ ./osctrl-admin -h NAME: osctrl-admin - Admin service for osctrl, a fast and efficient osquery management USAGE: osctrl-admin [global options] command [command options] [arguments...] VERSION: 0.3.0 DESCRIPTION: Admin service for osctrl, a fast and efficient osquery management COMMANDS: help GLOBAL OPTIONS: --config, -c Provide service configuration via JSON file (default: false) [$SERVICE_CONFIG] --config-file FILE, -C FILE Load service configuration from FILE (default: \u0026#34;config/admin.json\u0026#34;) [$SERVICE_CONFIG_FILE] --listener value, -l value Listener for the service (default: \u0026#34;0.0.0.0\u0026#34;) [$SERVICE_LISTENER] --port value, -p value TCP port for the service (default: \u0026#34;9001\u0026#34;) [$SERVICE_PORT] --auth value, -A value Authentication mechanism for the service (default: \u0026#34;db\u0026#34;) [$SERVICE_AUTH] --host value, -H value Exposed hostname the service uses (default: \u0026#34;0.0.0.0\u0026#34;) [$SERVICE_HOST] --session-key value Session key to generate cookies from it [$SESSION_KEY] --logging value, -L value Logging mechanism to handle logs from nodes (default: \u0026#34;db\u0026#34;) [$SERVICE_LOGGER] --redis, -r Provide redis configuration via JSON file (default: false) [$REDIS_CONFIG] --redis-file FILE, -R FILE Load redis configuration from FILE (default: \u0026#34;config/redis.json\u0026#34;) [$REDIS_CONFIG_FILE] --redis-host value Redis host to be connected to (default: \u0026#34;127.0.0.1\u0026#34;) [$REDIS_HOST] --redis-port value Redis port to be connected to (default: \u0026#34;6379\u0026#34;) [$REDIS_PORT] --redis-pass value Password to be used for redis [$REDIS_PASS] --redis-db value Redis database to be selected after connecting (default: 0) [$REDIS_DB] --redis-status-exp value Redis expiration in hours for status logs (default: 24) [$REDIS_STATUS_EXP] --redis-result-exp value Redis expiration in hours for result logs (default: 24) [$REDIS_RESULT_EXP] --redis-query-exp value Redis expiration in hours for query logs (default: 24) [$REDIS_QUERY_EXP] --db, -d Provide DB configuration via JSON file (default: false) [$DB_CONFIG] --db-file FILE, -D FILE Load DB configuration from FILE (default: \u0026#34;config/db.json\u0026#34;) [$DB_CONFIG_FILE] --db-host value Backend host to be connected to (default: \u0026#34;127.0.0.1\u0026#34;) [$DB_HOST] --db-port value Backend port to be connected to (default: \u0026#34;5432\u0026#34;) [$DB_PORT] --db-name value Database name to be used in the backend (default: \u0026#34;osctrl\u0026#34;) [$DB_NAME] --db-user value Username to be used for the backend (default: \u0026#34;postgres\u0026#34;) [$DB_USER] --db-pass value Password to be used for the backend (default: \u0026#34;postgres\u0026#34;) [$DB_PASS] --db-max-idle-conns value Maximum number of connections in the idle connection pool (default: 20) [$DB_MAX_IDLE_CONNS] --db-max-open-conns value Maximum number of open connections to the database (default: 100) [$DB_MAX_OPEN_CONNS] --db-conn-max-lifetime value Maximum amount of time a connection may be reused (default: 30) [$DB_CONN_MAX_LIFETIME] --tls, -t Enable TLS termination. It requires certificate and key (default: false) [$TLS_SERVER] --cert FILE, -T FILE TLS termination certificate from FILE (default: \u0026#34;config/tls.crt\u0026#34;) [$TLS_CERTIFICATE] --key FILE, -K FILE TLS termination private key from FILE (default: \u0026#34;config/tls.key\u0026#34;) [$TLS_KEY] --saml-file FILE Load SAML configuration from FILE (default: \u0026#34;config/saml.json\u0026#34;) [$SAML_CONFIG_FILE] --jwt, -j Provide JWT configuration via JSON file (default: false) [$JWT_CONFIG] --jwt-file FILE Load JWT configuration from FILE (default: \u0026#34;config/jwt.json\u0026#34;) [$JWT_CONFIG_FILE] --jwt-secret value Password to be used for the backend [$JWT_SECRET] --jwt-expire value Maximum amount of hours for the tokens to expire (default: 3) [$JWT_EXPIRE] --osquery-version value Set osquery version as default to be used (default: \u0026#34;5.4.0\u0026#34;) [$OSQUERY_VERSION] --osquery-tables FILE Load osquery tables schema from FILE (default: \u0026#34;data/5.4.0.json\u0026#34;) [$OSQUERY_TABLES] --logger-file value, -F value Logger configuration to handle status/results logs from nodes (default: \u0026#34;config/logger.json\u0026#34;) [$LOGGER_FILE] --static value, -s value Directory with all the static files needed for the osctrl-admin UI (default: \u0026#34;./static\u0026#34;) [$STATIC_FILES] --static-offline, -S Use offline static files (js and css). Default is online files. (default: false) [$STATIC_ONLINE] --templates value Directory with all the templates needed for the osctrl-admin UI (default: \u0026#34;./tmpl_admin\u0026#34;) [$STATIC_FILES] --carved value Directory for all the received carved files from osquery (default: \u0026#34;./carved_files/\u0026#34;) [$CARVED_FILES] --carver-type value Carver to be used to receive files extracted from nodes (default: \u0026#34;db\u0026#34;) [$CARVER_TYPE] --carver-file value Carver configuration file to receive files extracted from nodes (default: \u0026#34;config/carver.json\u0026#34;) [$CARVER_FILE] --log-s3-bucket value S3 bucket to be used as configuration for logging [$LOG_S3_BUCKET] --log-s3-region value S3 region to be used as configuration for logging [$LOG_S3_REGION] --log-s3-key-id value S3 access key id to be used as configuration for logging [$LOG_S3_KEY_ID] --log-s3-secret value S3 access key secret to be used as configuration for logging [$LOG_S3_SECRET] --carver-s3-bucket value S3 bucket to be used as configuration for carves [$CARVER_S3_BUCKET] --carver-s3-region value S3 region to be used as configuration for carves [$CARVER_S3_REGION] --carve-s3-key-id value S3 access key id to be used as configuration for carves [$CARVER_S3_KEY_ID] --carve-s3-secret value S3 access key secret to be used as configuration for carves [$CARVER_S3_SECRET] --version, -v print the version (default: false) "
},
{
	"uri": "https://osctrl.net/deployment/docker/",
	"title": "Using Docker",
	"tags": [],
	"description": "",
	"content": "You can use docker to run osctrl. Each component has a separate Dockerfile to run independently. There is also a docker-compose.yml that ties all the components together to serve a functional deployment.\nIn the Makefile there are docker specific commands to deploy osctrl, which are utilizing the dockerize.sh command\n"
},
{
	"uri": "https://osctrl.net/components/osctrl-admin/",
	"title": "osctrl-admin",
	"tags": [],
	"description": "",
	"content": " The osctrl-admin component of osctrl provides an administration interface to interact with the enrolled nodes.\n"
},
{
	"uri": "https://osctrl.net/deployment/",
	"title": "Deployment",
	"tags": [],
	"description": "",
	"content": "Deployment Different ways to deploy osctrl and customize the environment.\n"
},
{
	"uri": "https://osctrl.net/usage/osctrl-cli/tag/",
	"title": "tag",
	"tags": [],
	"description": "",
	"content": "Tags $ ./osctrl-cli tag -h NAME: osctrl-cli tag - Commands for tags USAGE: osctrl-cli tag command [command options] [arguments...] COMMANDS: add, a Add a new tag edit, e Edit values for an existing tag delete, d Delete an existing tag list, l List all tags show, s Show an existing tag OPTIONS: --help, -h show help Add tag $ ./osctrl-cli tag add -h NAME: osctrl-cli tag add - Add a new tag USAGE: osctrl-cli tag add [command options] [arguments...] OPTIONS: --name value, -n value Tage name to be added --color value, -c value Tag color to be added --description value, -d value Tag description to be added --icon value, -i value Tag icon to be added Edit tag $ ./osctrl-cli tag edit -h NAME: osctrl-cli tag edit - Edit values for an existing tag USAGE: osctrl-cli tag edit [command options] [arguments...] OPTIONS: --name value, -n value Tage name to be edited --color value, -c value Tag color to be edited --description value, -d value Tag description to be edited --icon value, -i value Tag icon to be edited Delete tag $ ./osctrl-cli tag delete -h NAME: osctrl-cli tag delete - Delete an existing tag USAGE: osctrl-cli tag delete [command options] [arguments...] OPTIONS: --name value, -n value Tag name to be deleted List tags $ ./osctrl-cli tag list -h NAME: osctrl-cli tag list - List all tags USAGE: osctrl-cli tag list [arguments...] Show tag $ ./osctrl-cli tag show -h NAME: osctrl-cli tag show - Show an existing tag USAGE: osctrl-cli tag show [command options] [arguments...] OPTIONS: --name value, -n value Tag name to be displayed "
},
{
	"uri": "https://osctrl.net/usage/osctrl-cli/settings/",
	"title": "settings",
	"tags": [],
	"description": "",
	"content": "Settings $ ./osctrl-cli settings -h NAME: osctrl-cli settings - Commands for settings USAGE: osctrl-cli settings command [command options] [arguments...] COMMANDS: add, a Add a new settings value update, u Update a configuration value delete, d Delete an existing configuration value show, s Show all configuration values OPTIONS: --help, -h show help Add setting $ ./osctrl-cli settings add -h NAME: osctrl-cli settings add - Add a new settings value USAGE: osctrl-cli settings add [command options] [arguments...] OPTIONS: --name value, -n value Value name to be added --service value, -s value Value service to be added --type value, -t value Value type to be added --string value Value string --integer value Value integer (default: 0) --boolean Value boolean --info value, -i value Setting info Update setting $ ./osctrl-cli settings update -h NAME: osctrl-cli settings update - Update a configuration value USAGE: osctrl-cli settings update [command options] [arguments...] OPTIONS: --name value, -n value Value name to be updated --service value, -s value Value service to be updated --type value, -t value Value type to be updated --string value Value string --integer value Value integer (default: 0) --true Value boolean true --false Value boolean false --info value, -i value Setting info Delete setting $ ./osctrl-cli settings delete -h NAME: osctrl-cli settings delete - Delete an existing configuration value USAGE: osctrl-cli settings delete [command options] [arguments...] OPTIONS: --name value, -n value Value name to be deleted --service value, -s value Value service to be deleted Show settings $ ./osctrl-cli settings show -h NAME: osctrl-cli settings show - Show all configuration values USAGE: osctrl-cli settings show [arguments...] "
},
{
	"uri": "https://osctrl.net/usage/osctrl-cli/",
	"title": "osctrl-cli",
	"tags": [],
	"description": "",
	"content": "osctrl-cli is the CLI for osctrl. Its purpose is to execute actions in osctrl without having to access directly the backend or use the admin interface. It can be very handy to automate actions in scripts or similar.\nExecute ./osctrl-cli -h to show the main help of the program:\n$ ./osctrl-cli -h NAME: osctrl-cli - CLI for osctrl USAGE: osctrl-cli [global options] command [command options] [arguments...] VERSION: 0.3.0 DESCRIPTION: CLI for osctrl, a fast and efficient osquery management COMMANDS: user Commands for users environment, env Commands for TLS environment settings Commands for settings node Commands for nodes query Commands for queries tag Commands for tags check-db Checks DB connection check-api Checks API token help, h Shows a list of commands or help for one command GLOBAL OPTIONS: --db, -d Connect to local osctrl DB using JSON config file (default: false) [$DB_CONFIG] --api, -a Connect to remote osctrl using JSON config file (default: true) [$API_CONFIG] --api-file FILE, -A FILE Load API JSON configuration from FILE [$API_CONFIG_FILE] --api-url value, -U value The URL for osctrl API to be used [$API_URL] --api-token value, -T value Token to authenticate with the osctrl API [$API_TOKEN] --db-file FILE, -D FILE Load DB JSON configuration from FILE [$DB_CONFIG_FILE] --db-host value Backend host to be connected to (default: \u0026#34;127.0.0.1\u0026#34;) [$DB_HOST] --db-port value Backend port to be connected to (default: \u0026#34;5432\u0026#34;) [$DB_PORT] --db-name value Database name to be used in the backend (default: \u0026#34;osctrl\u0026#34;) [$DB_NAME] --db-user value Username to be used for the backend (default: \u0026#34;postgres\u0026#34;) [$DB_USER] --db-pass value Password to be used for the backend (default: \u0026#34;postgres\u0026#34;) [$DB_PASS] --db-max-idle-conns value Maximum number of connections in the idle connection pool (default: 20) [$DB_MAX_IDLE_CONNS] --db-max-open-conns value Maximum number of open connections to the database (default: 100) [$DB_MAX_OPEN_CONNS] --db-conn-max-lifetime value Maximum amount of time a connection may be reused (default: 30) [$DB_CONN_MAX_LIFETIME] --insecure, -i Allow insecure server connections when using SSL (default: false) --json, -j Print output in JSON format (default: false) --csv, -c Print output in CSV format (default: false) --pretty, -p Print output in pretty format (table) (default: true) --help, -h show help (default: false) --version, -v print the version (default: false) Each command has its own help and it is displayed appending -h to them. Each subcommand has its own help as well.\n"
},
{
	"uri": "https://osctrl.net/deployment/natively/",
	"title": "Using provision.sh",
	"tags": [],
	"description": "",
	"content": "If you want to deploy osctrl in your own environment, you can use the provision.sh to install all necessary dependencies and to configure all components.\nIt is a good idea to take a look at the usage of the provisioning script to understand all the options and all the parameters. Check out also how the same script is used with vagrant to deploy osctrl in a local virtual machine, with all components installed and configured.\nExamples The most common use case for provisioning osctrl is very similar to how it gets provisioned for vagrant, which means in dev mode and using self-signed certificates.\n"
},
{
	"uri": "https://osctrl.net/components/osctrl-cli/",
	"title": "osctrl-cli",
	"tags": [],
	"description": "",
	"content": " The osctrl-cli component is the CLI for osctrl. Its purpose is to execute actions in osctrl without having to access directly the backend or use the admin interface. It can be very handy to automate actions in scripts or similar.\nFor a comprehensive list of all the commands and options, take a look at the usage of osctrl-cli.\nHere is a quick example of what the output of some commands look like:\n"
},
{
	"uri": "https://osctrl.net/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Each component of osctrl requires a separate configuration in order to operate properly. During deployment, each configuration will be generated using templates and some helper functions that are part of the provisioning tools.\nservice.json The configuration of the service applies both to osctrl-tls and osctrl-admin and it is expected to be named by default tls.json and admin.json respectively. However those default values can be modified, and a different filename may be specified, using the right parameter.\nThe format of those files follows the template:\n{ \u0026#34;_SERVICE_NAME\u0026#34;: { \u0026#34;listener\u0026#34;: \u0026#34;_LISTENER\u0026#34;, \u0026#34;port\u0026#34;: \u0026#34;_SERVICE_PORT\u0026#34;, \u0026#34;host\u0026#34;: \u0026#34;_SERVICE_HOST\u0026#34;, \u0026#34;auth\u0026#34;: \u0026#34;_SERVICE_AUTH\u0026#34;, \u0026#34;logger\u0026#34;: \u0026#34;_SERVICE_LOGGING\u0026#34;, \u0026#34;carver\u0026#34;: \u0026#34;_SERVICE_CARVER\u0026#34; } } All the fields that start with an underscore, will be filled in with a value. Here are the values that can go on each:\n_SERVICE_NAME: To identify the service that is file is configuring. It can be tls or admin, _LISTENER: Local listener for the service. Usually 127.0.0.1, but sometimes in docker it could be 0.0.0.0, _SERVICE_PORT: Local port for the listener. By default is 9000 for osctrl-tls and 9001 for osctrl-admin, _SERVICE_HOST: Host or domain that this service will be accesible from, _SERVICE_AUTH: Type of authentication that will service will implement. Values can be: none - No authentication json - Users provided in the same JSON configuration file db - Users stored and retrieved from backend saml - Authentication will be provided using SAML. It requires its own saml.json configuration file headers - Authentication will be provided verifying headers, using a middleware approach _SERVICE_LOGGING: Type of logging that each service will implement. Values can be: none - No logging, data will be discarded stdout - Logs will go to the stdout of the service db - Logs will be store in the backend graylog - Logs will be sent to Graylog. It requires its own graylog.json configuration file splunk - Logs will be sent to Splunk. It requires its own splunk.json configuration file s3 - Logs will be sent to AWS S3. It requires its own carver.json configuration file _SERVICE_CARVER: Type of carver that each service will implment. Values can be: db - Carves will be store in the backend s3 - Carves will be sent to AWS S3. It requires its own carver.json configuration file Each service will only allow some types! For osctrl-tls, the allowed types for logging are graylog, db and splunk while only none is allowed for auth. For osctrl-admin, the only allowed type for logging is db while for logging are db, saml, headers and json.\nIf you want to use the helper functions that are part of the provisioning process, first you have to import the lib.sh, like so:\n$ source deploy/lib.sh And now just call the function configuration_service with the correct parameters, for example:\n$ configuration_service \u0026#34;deploy/service.json\u0026#34; \u0026#34;admin.json\u0026#34; \u0026#34;localhost|9001\u0026#34; \u0026#34;admin\u0026#34; \u0026#34;0.0.0.0\u0026#34; \u0026#34;db\u0026#34; \u0026#34;db\u0026#34; For other examples you can see how this is done during the deployment process, for the admin and the tls components.\nBackend access The access to the backend service applies to osctrl-tls, osctrl-admin and osctrl-cli considering that they all access the data stored in the backend component.\nSimilar to the service configuration, there is a template:\n{ \u0026#34;db\u0026#34;: { \u0026#34;host\u0026#34;: \u0026#34;_DB_HOST\u0026#34;, \u0026#34;port\u0026#34;: \u0026#34;_DB_PORT\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;_DB_NAME\u0026#34;, \u0026#34;username\u0026#34;: \u0026#34;_DB_USERNAME\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;_DB_PASSWORD\u0026#34;, \u0026#34;max_idle_conns\u0026#34;: 20, \u0026#34;max_open_conns\u0026#34;: 100, \u0026#34;conn_max_lifetime\u0026#34;: 30 } } nginx TLS termination using nginx.\nMetrics Metrics using InfluxDB + Telegraf + Grafana.\nLogging Loggity logs.\nLogging is implemented using plugins and each plugin will require its own configuration.\n"
},
{
	"uri": "https://osctrl.net/usage/osctrl-cli/node/",
	"title": "node",
	"tags": [],
	"description": "",
	"content": "Node $ ./osctrl-cli node -h NAME: osctrl-cli node - Commands for nodes USAGE: osctrl-cli node command [command options] [arguments...] COMMANDS: delete, d Delete and archive an existing node list, l List enrolled nodes OPTIONS: --help, -h show help Delete node $ ./osctrl-cli node delete -h NAME: osctrl-cli node delete - Delete and archive an existing node USAGE: osctrl-cli node delete [command options] [arguments...] OPTIONS: --uuid value, -u value Node UUID to be deleted List nodes $ ./osctrl-cli node list -h NAME: osctrl-cli node list - List enrolled nodes USAGE: osctrl-cli node list [command options] [arguments...] OPTIONS: --all, -v Show all nodes --inactive, -i Show inactive nodes "
},
{
	"uri": "https://osctrl.net/usage/provision.sh/",
	"title": "provision.sh",
	"tags": [],
	"description": "",
	"content": "provision.sh is the provisioning script for osctrl in Ubuntu 20.04. It uses several functions from lib.sh.\nIts purpose is to install all necessary components to deploy osctrl in an Ubuntu 20.04 system, although it could be easily adapted to work in CentOS 7.\nExecute ./deploy/provision.sh [-h|--help] to show the usage of the script:\n$ ./deploy/provision.sh -h Usage: ./deploy/provision.sh [-h|--help] [PARAMETER [ARGUMENT]] [PARAMETER [ARGUMENT]] ... Parameters: -h, --help Shows this help message and exit. -m MODE, --mode MODE Mode of operation. Default value is dev -t TYPE, --type TYPE Type of certificate to use. Default value is self -p PART, --part PART Part of the service. Default is all Arguments for MODE: dev Provision will run in development mode. Certificate will be self-signed. prod Provision will run in production mode. Arguments for TYPE: self Provision will use a self-signed TLS certificate that will be generated. own Provision will use the TLS certificate provided by the user. certbot Provision will generate a TLS certificate using letsencrypt/certbot. More info here: https://certbot.eff.org/ Arguments for PART: admin Provision will deploy only the admin interface. tls Provision will deploy only the TLS endpoint. all Provision will deploy both the admin and the TLS endpoint. Optional Parameters: --public-tls-port PORT Port for the TLS endpoint service. Default is 443 --public-admin-port PORT Port for the admin service. Default is 8443 --public-api-port PORT Port for the API service. Default is 8444 --private-tls-port PORT Port for the TLS endpoint service. Default is 9000 --private-admin-port PORT Port for the admin service. Default is 9001 --private-api-port PORT Port for the API service. Default is 9002 --all-hostname HOSTNAME Hostname for all the services. Default is 127.0.0.1 --tls-hostname HOSTNAME Hostname for the TLS endpoint service. Default is 127.0.0.1 --admin-hostname HOSTNAME Hostname for the admin service. Default is 127.0.0.1 --api-hostname HOSTNAME Hostname for the API service. Default is 127.0.0.1 -X PASS --password Force the admin password for the admin interface. Default is random -c PATH --certfile PATH Path to supplied TLS server PEM certificate(s) bundle -d DOMAIN --domain DOMAIN Domain for the TLS certificate to be generated using letsencrypt -e EMAIL --email EMAIL Domain for the TLS certificate to be generated using letsencrypt -s PATH --source PATH Path to code. Default is /vagrant -S PATH --dest PATH Path to binaries. Default is /opt/osctrl -n --nginx Install and configure nginx as TLS termination -P --postgres Install and configure PostgreSQL as backend -M --metrics Install and configure all services for metrics (InfluxDB + Telegraf + Grafana) -R --redis Install and configure Redis as cache -E --enroll Enroll the serve into itself using osquery. Default is disabled -N NAME --env NAME Initial environment name to be created. Default is the mode (dev or prod) -U --upgrade Keep osctrl upgraded with the latest code from Github Examples: Provision service in development mode, code is in /vagrant and all components (admin, tls, api): ./deploy/provision.sh -m dev -s /vagrant -p all Provision service in production mode using my own certificate and only with TLS endpoint: ./deploy/provision.sh -m prod -t own -k /etc/certs/my.key -c /etc/certs/cert.crt -p tls Upgrade service with the latest code from Github. Does not create services nor certificates: ./deploy/provision.sh -U -s /code/osctrl -S /srv/osctrl "
},
{
	"uri": "https://osctrl.net/components/nginx/",
	"title": "nginx",
	"tags": [],
	"description": "",
	"content": " The nginx component performs the task of TLS termination for the osctrl services. If your network has many nodes enrolled in osctrl, most likely your TLS service (osctrl-tls) will receive a large number of requests per second, and on top of TLS termination, this component can then also act as load balancer.\n"
},
{
	"uri": "https://osctrl.net/usage/",
	"title": "Usage",
	"tags": [],
	"description": "",
	"content": "Usage You can\u0026rsquo;t know how to use osctrl components if you don\u0026rsquo;t read the documentation\u0026hellip;\n"
},
{
	"uri": "https://osctrl.net/usage/osctrl-cli/query/",
	"title": "query",
	"tags": [],
	"description": "",
	"content": "Query $ ./osctrl-cli query -h NAME: osctrl-cli query - Commands for queries USAGE: osctrl-cli query command [command options] [arguments...] COMMANDS: complete, c Mark an on-demand query as completed delete, d Mark an on-demand query as deleted list, l List on-demand queries OPTIONS: --help, -h show help Complete query $ ./osctrl-cli query complete -h NAME: osctrl-cli query complete - Mark an on-demand query as completed USAGE: osctrl-cli query complete [command options] [arguments...] OPTIONS: --name value, -n value Query name to be completed Delete query $ ./osctrl-cli query delete -h NAME: osctrl-cli query delete - Mark an on-demand query as deleted USAGE: osctrl-cli query delete [command options] [arguments...] OPTIONS: --name value, -n value Query name to be deleted List queries $ ./osctrl-cli query list -h NAME: osctrl-cli query list - List on-demand queries USAGE: osctrl-cli query list [command options] [arguments...] OPTIONS: --active, -a Show active queries --completed, -c Show completed queries --deleted, -d Show deleted queries "
},
{
	"uri": "https://osctrl.net/usage/dockerize.sh/",
	"title": "dockerize.sh",
	"tags": [],
	"description": "",
	"content": "dockerize.sh is the provisioning script for osctrl in a Docker environment. It needs a docker-compose.yml and requires docker-compose to be installed.\nIt uses several functions from /deploy/lib.sh. The main idea behind using a helper like this is to be able to generate configurations and certificates before launching the containers. For a pure docker or k8s environment just use each Dockerfile as reference.\nExecute ./docker/dockerize.sh -h to show the usage of the script:\n$ ./docker/dockerize.sh -h Usage: ./deploy/docker/dockerize.sh -h [PARAMETER] [PARAMETER] ... Parameters: -h\tShows this help message and exit. -b\tBuilds new docker containers. -u\tRun existing osctrl containers. -f\tForces the generation of new certificates. -J\tGenerates new JWT secret. -m\tUses mkcert (https://github.com/FiloSottile/mkcert) to generate a certificate and trust it locally. -d\tTakes down running osctrl containers. -x\tRemoves container images. -C\tExisting certificate to be used with osctrl. -K\tExisting private key to be used with osctrl. -D\tBuild development environment. Examples: Run dockerized osctrl building new containers and forcing to generate new certificates: ./deploy/docker/dockerize.sh -u -b -f Run existing containers with existing certificates: ./deploy/docker/dockerize.sh -u -C cert.crt -K private.key There are good examples of the usage of dockerize.sh in the Makefile.\n"
},
{
	"uri": "https://osctrl.net/components/backend/",
	"title": "Backend",
	"tags": [],
	"description": "",
	"content": " The backend component provides a centralized place where all the osctrl data is stored. In the diagram above, it is displayed with a PostgreSQL logo, and in fact, the default provisioning of osctrl does install PostgreSQL 9.6 as backend. However, the code that handles database access uses GORM so the changes to make osctrl work with a different backend solution would be minimal.\nEach component uses the backend differently but all of them have read/write operations.\n"
},
{
	"uri": "https://osctrl.net/contributing/",
	"title": "Contributing",
	"tags": [],
	"description": "",
	"content": "Like any other open source projects, there are multiple ways to contribute to osctrl:\nAs a developer, depending on your skills and experience, As a user who enjoys the project and wants to help. Reporting Bugs If you found something broken or not working properly, feel free to create an issue in Github with as much information as possible, such as logs and how to reproduce the problem. Before opening the issue, make sure that:\nYou have read this documentation, You are using the latest stable version of osctrl, You already searched other issues to see if your problem or request was already reported. Improving the Documentation You can improve this documentation by forking its repository, updating the content and sending a pull request.\nWe ❤️ Pull Requests A pull request does not need to be a fix for a bug or implementing something new. Software can always be improved, legacy code removed and tests are always welcome!\nPlease do not be afraid of contributing code, make sure it follows these rules:\nYour code compiles, does not break any of the existing code in the master branch and does not cause conflicts, The code is readable and has comments, that aren\u0026rsquo;t superfluous or unnecessary, An overview or context is provided as body of the Pull Request. It does not need to be too extensive. Extra points if your code comes with tests!\n"
},
{
	"uri": "https://osctrl.net/usage/osctrl-cli/check/",
	"title": "check",
	"tags": [],
	"description": "",
	"content": "Check $ ./osctrl-cli check -h NAME: osctrl-cli check - Checks DB connection USAGE: osctrl-cli check [command options] [arguments...] OPTIONS: --help, -h show help (default: false) Although this command may appear a bit confusing, it comes in really handy to verify when the backend component is ready to go.\n"
},
{
	"uri": "https://osctrl.net/components/metrics/",
	"title": "Metrics",
	"tags": [],
	"description": "",
	"content": " The metrics component of osctrl provides instrumentation for the following operations:\nReceiving requests to osctrl-tls, Receiving requests to osctrl-admin, Generating errors during normal operations both in osctrl-tls and osctrl-admin. Note that if the number of enrolled nodes is large enough, these metrics will generate valuable data to assess the performance of osctrl.\nThe default provisioning of osctrl does install InfluxDB + Telegraf + Grafana to act as the metrics component, but any monitoring solution that follows the push model, should work as well.\n"
},
{
	"uri": "https://osctrl.net/components/osctrld/",
	"title": "osctrld",
	"tags": [],
	"description": "",
	"content": " The osctrld component is the CLI for osctrl. Its purpose is to execute actions in osctrl without having to access directly the backend or use the admin interface. It can be very handy to automate actions in scripts or similar.\nFor a comprehensive list of all the commands and options, take a look at the usage of osctrld.\n"
},
{
	"uri": "https://osctrl.net/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "osctrl What is osctrl? osctrl is a fast and efficient osquery management solution, implementing its remote API as TLS endpoint.\nWith osctrl you are able to:\nMonitor all your systems running osquery, Distribute osquery configuration fast across all your enrolled nodes, Collect all the status and result logs, whether you want to store them or forward them to a different system (Splunk, ELK, Kafka, Graylog\u0026hellip;), Run quasi-real-time on-demand queries in your selected enrolled nodes, Carve files or directories from your enrolled nodes. osctrl has been designed to work as a scalable and reliable solution. It has been used successfully in networks from hundreds to hundreds of thousands nodes.\nGive it a try!\nhttps://github.com/jmpsec/osctrl\n"
},
{
	"uri": "https://osctrl.net/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://osctrl.net/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]